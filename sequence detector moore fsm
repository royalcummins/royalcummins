CODE:
module fsm(
 input in,
 input clk,
 input reset,
 output reg out,
 output reg [1:0] state
 );
 parameter s0=2'b00;
 parameter s1=2'b01;
 parameter s2=2'b10;
 parameter s3=2'b11;
 always @(*)
 begin
 if (reset)
 begin
 state<=s0;
 out=1'b0;
 end
 case (state)
s0:
 if (in==1'b1)
 begin
 state<=s1;
 out<=1'b0;
 end
 else
 begin
 state<=s0;
 out<=1'b0;
 end
 s1:
if (in==1'b1)
 begin
 state<=s2;
 out<=1'b0;
 end
 else
 begin
 state<=s0;
 out<=1'b0;
 end
 s2:
 if (in==1'b1)
 begin
 state<=s3;
 out<=1'b1;
 end
 else
Test Bench:
module fsm_tb();
 reg clk;
 reg in;
 reg reset;
 wire [1:0]s;
 wire out;
 fsm uut(in,clk,reset,out,s);
 always #10 clk=~clk;
 initial
 begin
 clk=1'b0;
 reset=1'b1;#10
 reset=1'b0;
 in=1'b1;#10
 in=1'b1;#10
 in=1'b1;#10

 $finish;
 end
endmodule 
begin
 state<=s0;
 out<=1'b0;
 end
 s3:
 if (in==1'b1)
 begin
 state<=s3;
 out<=1'b1;
 end
 else
 begin
 state<=s0;
 out<=1'b0;
 end
 endcase
 end
endmodule
